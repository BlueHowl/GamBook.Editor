package org.helmo.gbeditor.infrastructures.jdbc;

/**
 * Classe de stockage des constantes de requêtes sql
 */
public class SqlQueries {

    //Create Tables

    /**
     * Requête de création de table livre
     */
    public static final String CREATE_BOOK_TABLE_STMT = "CREATE TABLE BOOK(" +
            "isbn VARCHAR(13) PRIMARY KEY, " +
            "title VARCHAR(150) NOT NULL, " +
            "summary VARCHAR (500) NOT NULL," +
            "author VARCHAR(100) NOT NULL)";

    /**
     * Requête de création de table page
     */
    public static final String CREATE_PAGE_TABLE_STMT = "CREATE TABLE PAGE(" +
            "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  " +
            "text VARCHAR(3000) NOT NULL," +
            "num INT," +
            "book_isbn VARCHAR(13)," +
            "FOREIGN KEY(book_isbn) REFERENCES BOOK(isbn)" +
            "ON DELETE CASCADE)";

    /**
     * Requête de création de table choix
     */
    public static final String CREATE_CHOICE_TABLE_STMT = "CREATE TABLE CHOICE(" +
            "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "text VARCHAR(250) NOT NULL," +
            "ref_page_id INT," +
            "page_id INT," +
            "FOREIGN KEY(page_id) REFERENCES PAGE(id)" +
            "ON DELETE CASCADE)";
//TODO ref_page_id foreign key ??


    //Inserts

    /**
     * Requête d'insertion d'un livre
     */
    public static final String INSERT_BOOK_STMT = "INSERT INTO BOOK " +
            "(isbn, title, summary, author) " +
            "VALUES (?, ?, ?, ?)";

    /**
     * Requête d'insertion d'une page
     */
    public static final String INSERT_PAGE_STMT = "INSERT INTO PAGE " +
            "(text, num, book_isbn) " +
            "VALUES (?, ?, ?)";

    /**
     * Requête d'insertion d'un choix
     */
    public static final String INSERT_CHOICES_STMT = "INSERT INTO CHOICE " +
            "(text, page_id, ref_page_id) " +
            "VALUES (?, ?, ?)";


    //Selects

    /**
     * Requête de séléction des livres sur base de l'id de l'auteur
     */
    public static final String SELECT_BOOKS_BY_AUTHOR_STMT = "SELECT * FROM BOOK " +
            "WHERE isbn LIKE ?";

    /**
     * Requête de séléction des pages sur base de l'isbn d'un livre
     */
    public static final String SELECT_PAGES_BY_BOOK_STMT = "SELECT * FROM PAGE " +
            "WHERE book_isbn = ? " +
            "ORDER BY num ASC";

    /**
     * Requête de séléction des choix sur base de l'isbn d'un livre
     */
    public static final String SELECT_CHOICES_BY_BOOK_STMT = "SELECT C.id AS ownerPage, C.ref_page_id AS refPage, C.text AS text " +
            "FROM CHOICE C " +
            "JOIN PAGE P ON P.id = C.page_id " +
            "WHERE book_isbn = ?";

    /**
     * Requête de séléction du nombre de livres enregistrés dans la bd selon l'id auteur
     */
    public static final String SELECT_BOOK_COUNT_STMT = "SELECT COUNT(*) AS bCount FROM BOOK " +
            "WHERE isbn LIKE ?";


    //Deletes

    /**
     * Requête de suppression d'un livre sur base de son isbn
     */
    public static final  String DELETE_BOOK_STMT = "DELETE FROM BOOK WHERE isbn = ?";
}

package org.helmo.gbeditor.infrastructures.jdbc;

/**
 * Classe de stockage des constantes de requêtes sql
 */
public class SqlQueries {

    //Create Tables

    /**
     * Requête de création de table auteur
     */
    public static final String CREATE_AUTHOR_TABLE_STMT = "CREATE TABLE AUTHOR(" +
            "code VARCHAR(6) NOT NULL PRIMARY KEY, " +
            "surname VARCHAR(50) NOT NULL, " +
            "name VARCHAR (50) NOT NULL)";

    /**
     * Requête de création de table livre
     */
    public static final String CREATE_BOOK_TABLE_STMT = "CREATE TABLE BOOK(" +
            "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "title VARCHAR(150) NOT NULL, " +
            "summary VARCHAR (500) NOT NULL, " +
            "isbn VARCHAR(13) NOT NULL," +
            "published BIT)";

    /**
     * Requête de création de table page
     */
    public static final String CREATE_PAGE_TABLE_STMT = "CREATE TABLE PAGE(" +
            "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "text VARCHAR(3000) NOT NULL, " +
            "num INT NOT NULL," +
            "book_id INT NOT NULL, " +
            "FOREIGN KEY(book_id) REFERENCES BOOK(id) " +
            "ON DELETE CASCADE)";

    /**
     * Requête de création de table choix
     */
    public static final String CREATE_CHOICE_TABLE_STMT = "CREATE TABLE CHOICE(" +
            "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "text VARCHAR(250) NOT NULL, " +
            "ref_page_id INT NOT NULL, " +
            "page_id INT NOT NULL, " +
            "FOREIGN KEY(page_id) REFERENCES PAGE(id) " +
            "ON DELETE CASCADE)";


    //Inserts

    /**
     * Requête d'insertion d'un auteur
     */
    public static final String INSERT_AUTHOR_STMT = "INSERT INTO AUTHOR " +
            "(code, surname, name) " +
            "VALUES (?, ?, ?)";

    /**
     * Requête d'insertion d'un livre
     */
    public static final String INSERT_BOOK_STMT = "INSERT INTO BOOK " +
            "(title, summary, isbn, published) " +
            "VALUES (?, ?, ?, false)";

    /**
     * Requête d'insertion d'une page
     */
    public static final String INSERT_PAGE_STMT = "INSERT INTO PAGE " +
            "(text, num, book_id) " +
            "VALUES (?, ?, ?)";

    /**
     * Requête d'insertion d'un choix
     */
    public static final String INSERT_CHOICES_STMT = "INSERT INTO CHOICE " +
            "(text, ref_page_id, page_id) " +
            "VALUES (?, ?, ?)";


    //Updates

    /**
     * Requête de mise à jour d'un livre
     */
    public static final String UPDATE_BOOK_STMT = "UPDATE BOOK " +
            "SET title = ?, summary = ?, isbn = ?" +
            "WHERE id = ?";

    /**
     * Requête de mise à jour publication du livre
     */
    public static final String UPDATE_PUBLISH_BOOK_STMT = "UPDATE BOOK " +
            "SET published = true " +
            "WHERE id = ?";

    /**
     * Requête de mise à jour d'une page
     */
    public static final String UPDATE_PAGE_STMT = "UPDATE PAGE " +
            "SET text = ?, num = ? " +
            "WHERE id = ?";

    /**
     * Requête de mise à jour d'un choix
     */
    public static final String UPDATE_CHOICE_STMT = "UPDATE CHOICE " +
            "SET text = ?, ref_page_id = ?, page_id = ? " +
            "WHERE id = ?";


    //Selects

    /**
     * Requête de sélection d'un auteur sur base de son code
     */
    public static final String SELECT_AUTHOR_BY_CODE_STMT = "SELECT surname, name FROM AUTHOR " +
            "WHERE code = ?";

    /**
     * Requête de sélection des livres sur base du code de l'auteur
     */
    public static final String SELECT_BOOKS_BY_AUTHOR_STMT = "SELECT B.id AS id, B.title AS title, B.summary AS summary, B.isbn AS isbn, B.published AS published, A.surname AS surname, A.name AS name " +
            "FROM BOOK B " +
            "JOIN AUTHOR A ON A.code = SUBSTR(B.isbn, 3, 6) " +
            "WHERE isbn LIKE ?";

    /**
     * Requête de sélection des pages sur base de l'isbn d'un livre
     */
    public static final String SELECT_PAGES_BY_BOOK_STMT = "SELECT * FROM PAGE " +
            "WHERE book_id = ? " +
            "ORDER BY num ASC";

    /**
     * Requête de sélection des choix sur base de l'isbn d'un livre
     */
    public static final String SELECT_CHOICES_BY_BOOK_STMT = "SELECT C.id AS id, C.page_id AS ownerPage, C.ref_page_id AS refPage, C.text AS text " +
            "FROM CHOICE C " +
            "JOIN PAGE P ON P.id = C.page_id " +
            "WHERE P.book_id = ?";

    /**
     * Requête de séléction du nombre de livres enregistrés dans la bd selon l'id auteur
     */
    public static final String SELECT_BOOK_COUNT_STMT = "SELECT COUNT(*) AS bCount FROM BOOK " +
            "WHERE isbn LIKE ?";


    //Deletes

    /**
     * Requête de suppression d'un livre sur base de son isbn
     */
    public static final  String DELETE_BOOK_STMT = "DELETE FROM BOOK WHERE isbn = ?";

    /**
     * Requête de suppression d'une page sur base de son id
     */
    public static final  String DELETE_PAGE_STMT = "DELETE FROM PAGE WHERE id = ?";

    /**
     * Requête de suppression d'un choix sur base de son id
     */
    public static final  String DELETE_CHOICE_STMT = "DELETE FROM CHOICE WHERE id = ?";
}
